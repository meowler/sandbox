{
  "_args": [
    [
      {
        "raw": "grunt-karma@^2.0.0",
        "scope": null,
        "escapedName": "grunt-karma",
        "name": "grunt-karma",
        "rawSpec": "^2.0.0",
        "spec": ">=2.0.0 <3.0.0",
        "type": "range"
      },
      "/repo/sandbox"
    ]
  ],
  "_from": "grunt-karma@>=2.0.0 <3.0.0",
  "_id": "grunt-karma@2.0.0",
  "_inCache": true,
  "_location": "/grunt-karma",
  "_nodeVersion": "6.0.0",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/grunt-karma-2.0.0.tgz_1464254930183_0.10637875273823738"
  },
  "_npmUser": {
    "name": "dignifiedquire",
    "email": "dignifiedquire@gmail.com"
  },
  "_npmVersion": "3.8.8",
  "_phantomChildren": {},
  "_requested": {
    "raw": "grunt-karma@^2.0.0",
    "scope": null,
    "escapedName": "grunt-karma",
    "name": "grunt-karma",
    "rawSpec": "^2.0.0",
    "spec": ">=2.0.0 <3.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "#DEV:/"
  ],
  "_resolved": "https://registry.npmjs.org/grunt-karma/-/grunt-karma-2.0.0.tgz",
  "_shasum": "753583d115dfdc055fe57e58f96d6b3c7e612118",
  "_shrinkwrap": null,
  "_spec": "grunt-karma@^2.0.0",
  "_where": "/repo/sandbox",
  "author": {
    "name": "Dave Geddes"
  },
  "bugs": {
    "url": "https://github.com/karma-runner/grunt-karma/issues"
  },
  "contributors": [
    {
      "name": "Dave Geddes",
      "email": "davidcgeddes@gmail.com"
    },
    {
      "name": "Julian Motz",
      "email": "me@julianmotz.com"
    },
    {
      "name": "Michał Gołębiowski",
      "email": "m.goleb@gmail.com"
    },
    {
      "name": "Mark Ethan Trostler",
      "email": "mark@zzo.com"
    },
    {
      "name": "dsuckau",
      "email": "denis.suckau@concepts-and-training.de"
    },
    {
      "name": "Daniel Herman",
      "email": "daniel.c.herman@gmail.com"
    },
    {
      "name": "Eddie Monge",
      "email": "eddie@eddiemonge.com"
    },
    {
      "name": "James Ford",
      "email": "jford@psyked.co.uk"
    },
    {
      "name": "Jonas Pommerening",
      "email": "jonas.pommerening@gmail.com"
    },
    {
      "name": "Julian",
      "email": "me@julianmotz.com"
    },
    {
      "name": "Luis Almeida",
      "email": "lmg.almeida@gmail.com"
    },
    {
      "name": "Matt Dean",
      "email": "matt@trabian.com"
    },
    {
      "name": "Max Riveiro",
      "email": "kavu13@gmail.com"
    },
    {
      "name": "Mike Dimmick",
      "email": "mike.dimmick@mnetics.co.uk"
    },
    {
      "name": "Nicolas Breitwieser",
      "email": "nicolas.breitwieser@googlemail.com"
    },
    {
      "name": "Olivier Amblet",
      "email": "olivier@amblet.net"
    },
    {
      "name": "Pascal Precht",
      "email": "pascal.precht@googlemail.com"
    },
    {
      "name": "Robin Hu",
      "email": "rhu@novus.com"
    },
    {
      "name": "Roman Morozov",
      "email": "romo@ciklum.com"
    },
    {
      "name": "Sahat Yalkabov",
      "email": "sakhat@gmail.com"
    },
    {
      "name": "Valentin Hervieu",
      "email": "valentin.hervieu@milanamos.com"
    },
    {
      "name": "Vlad Filippov",
      "email": "vlad.filippov@gmail.com"
    },
    {
      "name": "Vojta Jina",
      "email": "vojta.jina@gmail.com"
    },
    {
      "name": "enigmak",
      "email": "redingerkai@gmail.com"
    },
    {
      "name": "facboy",
      "email": "facboy@gmail.com"
    },
    {
      "name": "jiverson",
      "email": "jiverson222@gmail.com"
    },
    {
      "name": "joshrtay",
      "email": "joshrtay@gmail.com"
    },
    {
      "name": "kolesnik",
      "email": "andrii_kolesnyk@epam.com"
    },
    {
      "name": "Alexander Slansky",
      "email": "alexander@slansky.net"
    },
    {
      "name": "m7r",
      "email": "martin@figuro-theater.de"
    },
    {
      "name": "Alexey Kucherenko",
      "email": "alexei.kucherenko@gmail.com"
    },
    {
      "name": "Chris Gross",
      "email": "cgross@texeltek.com"
    },
    {
      "name": "Chris Wren",
      "email": "cthewren@gmail.com"
    },
    {
      "name": "Christian Reed",
      "email": "christian@rgbfab.com"
    },
    {
      "name": "Christoph Kraemer",
      "email": "chr.kraemer@sap.com"
    }
  ],
  "dependencies": {
    "lodash": "^3.10.1"
  },
  "description": "grunt plugin for karma test runner",
  "devDependencies": {
    "eslint": "^1.3.1",
    "eslint-config-standard": "^4.3.1",
    "eslint-plugin-react": "^3.3.1",
    "eslint-plugin-standard": "^1.3.2",
    "expect.js": "^0.3.1",
    "grunt": "^0.4.3",
    "grunt-bump": "0.5.0",
    "grunt-contrib-watch": "^0.6.1",
    "grunt-conventional-changelog": "^3.0.0",
    "grunt-conventional-github-releaser": "^0.2.0",
    "grunt-eslint": "^17.1.0",
    "grunt-npm": "0.0.2",
    "karma": "1.x || ^0.13.0",
    "karma-chrome-launcher": "1.x || ^0.2.0",
    "karma-firefox-launcher": "1.x || ^0.1.3",
    "karma-mocha": "1.x || ^0.2.0",
    "load-grunt-tasks": "^3.2.0",
    "mocha": "^2.4.5"
  },
  "directories": {},
  "dist": {
    "shasum": "753583d115dfdc055fe57e58f96d6b3c7e612118",
    "tarball": "https://registry.npmjs.org/grunt-karma/-/grunt-karma-2.0.0.tgz"
  },
  "gitHead": "afb752f3d261ad6e8afd51a9675976fea1683a8b",
  "homepage": "https://github.com/karma-runner/grunt-karma#readme",
  "keywords": [
    "gruntplugin",
    "karma",
    "grunt",
    "test",
    "unit",
    "runner",
    "TDD"
  ],
  "license": "MIT",
  "main": "tasks/grunt-karma.js",
  "maintainers": [
    {
      "name": "dignifiedquire",
      "email": "dignifiedquire@gmail.com"
    },
    {
      "name": "geddski",
      "email": "davidcgeddes@gmail.com"
    },
    {
      "name": "karmarunnerbot",
      "email": "karmarunnerbot@gmail.com"
    },
    {
      "name": "vojtajina",
      "email": "vojta.jina+npm@gmail.com"
    },
    {
      "name": "zzo",
      "email": "mark@zzo.com"
    }
  ],
  "name": "grunt-karma",
  "optionalDependencies": {},
  "peerDependencies": {
    "grunt": ">=0.4.x",
    "karma": "^0.13.0 || >= 0.14.0-rc.0"
  },
  "readme": "# grunt-karma\n\n[![js-standard-style](https://img.shields.io/badge/code%20style-standard-brightgreen.svg?style=flat-square)](https://github.com/karma-runner/grunt-karma)\n [![npm version](https://img.shields.io/npm/v/grunt-karma.svg?style=flat-square)](https://www.npmjs.com/package/grunt-karma) [![npm downloads](https://img.shields.io/npm/dm/grunt-karma.svg?style=flat-square)](https://www.npmjs.com/package/grunt-karma)\n\n[![Build Status](https://img.shields.io/travis/karma-runner/grunt-karma/master.svg?style=flat-square)](https://travis-ci.org/karma-runner/grunt-karma) [![Dependency Status](https://img.shields.io/david/karma-runner/grunt-karma.svg?style=flat-square)](https://david-dm.org/karma-runner/grunt-karma) [![devDependency Status](https://img.shields.io/david/dev/karma-runner/grunt-karma.svg?style=flat-square)](https://david-dm.org/karma-runner/grunt-karma#info=devDependencies)\n\n\n> Grunt plugin for [Karma](https://github.com/karma-runner/karma)\n\nThis current version uses `karma@0.13.x`. For using older versions see the\nold releases of grunt-karma.\n\n## Getting Started\nFrom the same directory as your project's Gruntfile and package.json, install\nkarma and grunt-karma with the following commands:\n\n```bash\n$ npm install karma --save-dev\n$ npm install grunt-karma --save-dev\n```\n\nOnce that's done, add this line to your project's Gruntfile:\n\n```js\ngrunt.loadNpmTasks('grunt-karma');\n```\n\n## Config\nInside your `Gruntfile.js` file, add a section named `karma`, containing\nany number of configurations for running karma. You can either put your\nconfig in a [karma config file] or leave it all in your Gruntfile (recommended).\n\n### Here's an example that points to the config file:\n\n```js\nkarma: {\n  unit: {\n    configFile: 'karma.conf.js'\n  }\n}\n```\n\n### Here's an example that puts the config in the Gruntfile:\n\n```js\nkarma: {\n  unit: {\n    options: {\n      files: ['test/**/*.js']\n    }\n  }\n}\n```\n\nYou can override any of the config file's settings by putting them\ndirectly in the Gruntfile:\n\n```js\nkarma: {\n  unit: {\n    configFile: 'karma.conf.js',\n    port: 9999,\n    singleRun: true,\n    browsers: ['PhantomJS'],\n    logLevel: 'ERROR'\n  }\n}\n```\n\nTo change the `logLevel` in the grunt config file instead of the karma config, use one of the following strings:\n`OFF`, `ERROR`, `WARN`, `INFO`, `DEBUG`\n\nThe `files` option can be extended \"per-target\" in the typical way\nGrunt handles [files][grunt-config-files]:\n\n```js\nkarma: {\n  options: {\n    files: ['lib/**/*.js']\n  },\n  unit: {\n    files: [\n      { src: ['test/**/*.js'] }\n    ]\n  }\n}\n```\n\nWhen using the \"Grunt way\" of specifying files, you can also extend the\nfile objects with the options [supported by karma][karma-config-files]:\n\n```js\nkarma: {\n  unit: {\n    files: [\n      { src: ['test/**/*.js'], served: true },\n      { src: ['lib/**/*.js'], served: true, included: false }\n    ]\n  }\n}\n```\n\n### Config with Grunt Template Strings in `files`\n\nWhen using template strings in the `files` option, the results will flattened. Therefore, if you include a variable that includes an array, the array will be flattened before being passed to Karma.\n\nExample:\n\n```js\nmeta: {\n  jsFiles: ['jquery.js','angular.js']\n},\nkarma: {\n  options: {\n    files: ['<%= meta.jsFiles %>','angular-mocks.js','**/*-spec.js']\n  }\n}\n```\n\n## Sharing Configs\nIf you have multiple targets, it may be helpful to share common\nconfiguration settings between them. Grunt-karma supports this by\nusing the `options` property:\n\n```js\nkarma: {\n  options: {\n    configFile: 'karma.conf.js',\n    port: 9999,\n    browsers: ['Chrome', 'Firefox']\n  },\n  continuous: {\n    singleRun: true,\n    browsers: ['PhantomJS']\n  },\n  dev: {\n    reporters: 'dots'\n  }\n}\n```\n\nIn this example the `continuous` and `dev` targets will both use\nthe `configFile` and `port` specified in the `options`. But\nthe `continuous` target will override the browser setting to use\nPhantomJS, and also run as a singleRun. The `dev` target will simply\nchange the reporter to dots.\n\n## Running tests\nThere are three ways to run your tests with karma:\n\n### Karma Server with Auto Runs on File Change\nSetting the `autoWatch` option to true will instruct karma to start\na server and watch for changes to files, running tests automatically:\n\n```js\nkarma: {\n  unit: {\n    configFile: 'karma.conf.js',\n    autoWatch: true\n  }\n}\n```\nNow run `$ grunt karma`\n\n### Karma Server with Grunt Watch\nMany Grunt projects watch several types of files using [grunt-contrib-watch].\nConfig karma like usual (without the autoWatch option), and add\n`background:true`:\n\n```js\nkarma: {\n  unit: {\n    configFile: 'karma.conf.js',\n    background: true,\n    singleRun: false\n  }\n}\n```\nThe `background` option will tell grunt to run karma in a child process\nso it doesn't block subsequent grunt tasks.\n\nThe `singleRun: false` option will tell grunt to keep the karma server up\nafter a test run.\n\nConfig your `watch` task to run the karma task with the `:run` flag. For example:\n\n```js\nwatch: {\n  //run unit tests with karma (server needs to be already running)\n  karma: {\n    files: ['app/js/**/*.js', 'test/browser/**/*.js'],\n    tasks: ['karma:unit:run'] //NOTE the :run flag\n  }\n},\n```\n\nIn your terminal window run `$ grunt karma:unit:start watch`, which starts the\nkarma server and the watch task. Now when grunt watch detects a change to\none of your watched files, it will run the tests specified in the `unit`\ntarget using the already running karma server. This is the preferred method\nfor development.\n\n### Single Run\nKeeping a browser window & karma server running during development is\nproductive, but not a good solution for build processes. For that reason karma\nprovides a \"continuous integration\" mode, which will launch the specified\nbrowser(s), run the tests, and close the browser(s). It also supports running\ntests in [PhantomJS], a headless webkit browser which is great for running tests as part of a build. To run tests in continous integration mode just add the `singleRun` option:\n\n```js\nkarma: {\n  unit: {\n    configFile: 'config/karma.conf.js',\n  },\n  //continuous integration mode: run tests once in PhantomJS browser.\n  continuous: {\n    configFile: 'config/karma.conf.js',\n    singleRun: true,\n    browsers: ['PhantomJS']\n  },\n}\n```\n\nThe build would then run `grunt karma:continuous` to start PhantomJS,\nrun tests, and close PhantomJS.\n\n## Using additional client.args\nYou can pass arbitrary `client.args` through the commandline like this:\n\n```bash\n$ grunt karma:dev watch --grep=mypattern\n```\n\n\n## License\nMIT License\n\n[karma-config-file]: http://karma-runner.github.com/latest/config/configuration-file.html\n[karma-config-files]: http://karma-runner.github.io/latest/config/files.html\n[grunt-config-files]: http://gruntjs.com/configuring-tasks#files\n[grunt-contrib-watch]: https://github.com/gruntjs/grunt-contrib-watch\n[PhantomJS]: http://phantomjs.org/\n[karma-mocha]: https://github.com/karma-runner/karma-mocha\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/karma-runner/grunt-karma.git"
  },
  "scripts": {
    "test": "grunt test"
  },
  "version": "2.0.0"
}
